{
    "collab_server" : "",
    "contents" : "generateAStarEdges=function(nodes=5) {\n  edges = matrix(rep(0,(nodes+2)^2),nrow=nodes+2)\n  rownames(edges)=c(\"Start\",LETTERS[1:nodes],\"Goal\")\n  colnames(edges)=c(\"Start\",LETTERS[1:nodes],\"Goal\")\n  for (i in 1:(nrow(edges)-1)) {\n    if (i==(nrow(edges)-1))\n      edges[i,i+1]=1\n    else {\n      other=sample((i+1):min(i+4,ncol(edges)),sample(0:2,1))\n      edges[i,other]=1\n      if (i!=nrow(edges))\n        edges[i,i+1]=1\n    }\n  }\n  p=matrix(sample(2:7,length(edges),T),nrow=nrow(edges))\n  edges=edges*p\n  return (edges)\n}\nmakeHeuristc=function(edges){\n  nodes=nrow(edges)\n  out=rep(0,nodes)\n  minH=min(edges[which(edges>0)])\n  for (i in (nodes-1):1) {\n    neighs=which(edges[i,]>0)\n    out[i]=min(out[neighs])+minH\n  }\n  return (out)\n}\nmakeBasicHeuristic=function(edges){\n  nodes=nrow(edges)\n  out=rep(0,nodes)\n  minH=1\n  for (i in (nodes-1):1) {\n    neighs=which(edges[i,]>0)\n    out[i]=min(out[neighs])+minH\n  }\n  return (out)\n}\n\nmakeNode=function(index,f,h,route) {\n  list(index=index,f=f,h=h,route=route)\n}\nwhichInFrontier=function(frontier,index) {\n  which(sapply(frontier,function(n)n$index==index))\n}\ninFrontier=function(frontier,index) {\n  if (length(frontier)==0)\n    return (FALSE)\n  else\n    return (any(whichInFrontier(frontier,index)))\n}\nbestFrontier=function(frontier) {\n  if (length(frontier)==0)\n    stop(\"WTF?\")\n  which.min(sapply(frontier,function(n)n$f+n$h))\n}\naddToFrontier=function(frontier,newNode,edges,heuristic,nextNode) {\n  if (!inFrontier(frontier,newNode)) {\n    frontier=append(frontier,list(\n      makeNode(\n        newNode,\n        nextNode$f+edges[nextNode$index,newNode],\n        heuristic[newNode],\n        c(nextNode$route,newNode)\n        )))\n  }\n  else {\n    otherIndex=whichInFrontier(frontier,newNode)\n    other=frontier[[otherIndex]]\n    newNodeNode=makeNode(\n      newNode,\n      nextNode$f+edges[nextNode$index,newNode],\n      heuristic[newNode],\n      c(nextNode$route,newNode)\n    )\n    if (other$f+other$h>newNodeNode$f+newNodeNode$h) {\n      frontier=frontier[-otherIndex]\n      frontier=append(frontier,list(newNodeNode))\n    }\n  }\n  return (frontier)\n}\n\ntestSolve=function(edges,heuristic) {\n  print(\"Heuristic:\")\n  print(heuristic)\n  frontier=list()\n  nextNode=makeNode(1,0,heuristic[1],c(1))\n  turns=0\n  while (nextNode$index!=length(heuristic)) {\n    turns=turns+1\n    print(paste(\"Turn:\",turns))\n    print(paste(\"Next:\",nextNode$index,\"(\",nextNode$f,\"-\",nextNode$h,\"-\",paste(nextNode$route,collapse=\",\"),\")\"))\n    neighbors=which(edges[nextNode$index,]>0)\n    for (n in neighbors) {\n      frontier=addToFrontier(frontier,n,edges,heuristic,nextNode)\n    }\n    print(\"Frontier:\")\n    for (n in frontier)\n      print(paste(\"  \",n$index,\"(\",n$f,\"-\",n$h,\"-\",paste(n$route,collapse=\",\"),\")\"))\n    best=bestFrontier(frontier)\n    nextNode=frontier[[best]]\n    frontier=frontier[-best]\n  }\n  print(paste(\"Total Turn:\",turns))\n  print(paste(\"Cost:\",nextNode$f))\n  print(paste(\"Route:\",paste(nextNode$route,collapse=\",\")))\n}\n\nmakeQuestionAStar=function(seed=NA,basic=F,nodes=5,answer=T,latex=F) {\n  if (!is.na(seed))\n    set.seed(seed)\n  edges=generateAStarEdges(nodes)\n  if (latex) {\n    cat(\"\\\\clearpage\\n\")\n    cat(\"\\\\section{A-Star}\\n\")\n    cat(\"\\nTable~\\\\ref{AStar_Edges} gives the edge values for a shortest path problem. \")\n    cat(\"Using these and the A* algorithm, find the shortest path from the start node to the goal node. \")\n    cat(\"Provide a valid heuristic and show all working. (4 marks)\\n\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{Edges}\\n\")\n    cat(\"\\\\label{AStar_Edges}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c||c|c|c|c|c|c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" & \",paste(colnames(edges),collapse=\" & \"),\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    for (i in 1:nrow(edges)) {\n      cat(rownames(edges)[i],\" & \",paste(edges[i,],collapse=\" & \"),\"\\\\\\\\\\n\",sep=\"\")\n    }\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n  }\n  else {\n    print(\"Edges:\")\n    print(edges)\n  }\n  if (answer) {\n    heuristic=makeHeuristc(edges)\n    if (basic)\n      heuristic=makeBasicHeuristic(edges)\n    testSolve(edges,heuristic)\n  }\n}\ngetAnswerAStar=function(seed=NA,basic=F){\n  if(!is.na(seed))\n    set.seed(seed)\n  edges=generateAStarEdges(nodes)\n  heuristic=makeHeuristc(edges)\n  if (basic)\n    heuristic=makeBasicHeuristic(edges)\n  testSolve(edges,heuristic)\n  return (NULL)\n}\n",
    "created" : 1508064175394.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "813375422",
    "id" : "E6204",
    "lastKnownWriteTime" : 1512835427,
    "last_content_update" : 1512835427311,
    "path" : "C:/Users/Acer/Desktop/Dokument/AI/2017/AIExam/R/AStar.R",
    "project_path" : "R/AStar.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "makeProbTables=function() {\n  rnds=sample(c(.05,.1,.15,.2,.25,.3,.35,.4,.45,.55,.6,.65,.7,.75,.8,.85,.9,.95),20,T)\n  out=list(\n  P_A=matrix(c(rnds[1],1-rnds[1]),nrow=1),\n  P_B_given_A=matrix(c(rnds[2],1-rnds[2],rnds[3],1-rnds[3]),nrow=2,byrow=T),\n  P_C_given_A=matrix(c(rnds[4],1-rnds[4],rnds[5],1-rnds[5]),nrow=2,byrow=T),\n  P_D_given_BC=matrix(c(rnds[6],1-rnds[6],rnds[7],1-rnds[7],rnds[8],1-rnds[8],rnds[9],1-rnds[9]),nrow=4,byrow=T),\n  P_E_given_C=matrix(c(rnds[10],1-rnds[10],rnds[11],1-rnds[11]),nrow=2,byrow=T)\n  )\n  colnames(out$P_A)=c(\"A=F\",\"A=T\")\n  colnames(out$P_B_given_A)=c(\"B=F\",\"B=T\")\n  colnames(out$P_C_given_A)=c(\"C=F\",\"C=T\")\n  colnames(out$P_D_given_BC)=c(\"D=F\",\"D=T\")\n  colnames(out$P_E_given_C)=c(\"E=F\",\"E=T\")\n  rownames(out$P_A)=c(\"NA\")\n  rownames(out$P_B_given_A)=c(\"A=F\",\"A=T\")\n  rownames(out$P_C_given_A)=c(\"A=F\",\"A=T\")\n  rownames(out$P_D_given_BC)=c(\"B=F,C=F\",\"B=F,C=T\",\"B=T,C=F\",\"B=T,C=T\")\n  rownames(out$P_E_given_C)=c(\"C=F\",\"C=T\")\n  return (out)\n\n}\ngetEvidence=function(){\n  nodes=sample(1:5,2)\n  evidence=sample(c(T,F),2,T)\n  data.frame(node=nodes,value=evidence)\n}\n\ngetProbability_=function(node,values,probs){\n  vIndex=ifelse(values[node],2,1)\n  if (node==1) {\n    return (probs[[1]][1,vIndex])\n  }\n  else if (node==2) {\n    aIndex=ifelse(values[1],2,1)\n    return (probs[[2]][aIndex,vIndex])\n  }\n  else if (node==3) {\n    aIndex=ifelse(values[1],2,1)\n    return (probs[[3]][aIndex,vIndex])\n  }\n  else if (node==4) {\n    bIndex=ifelse(values[2],2,1)\n    cIndex=ifelse(values[3],2,1)\n    rIndex=2*(bIndex-1)+cIndex\n    return (probs[[4]][rIndex,vIndex])\n  }\n  else if (node==5) {\n    cIndex=ifelse(values[3],2,1)\n    return (probs[[5]][cIndex,vIndex])\n  }\n  else {\n    stop(\"WTF\")\n  }\n}\ngetProbability=function(values,probs){\n  prod(sapply(1:5,getProbability_,values,probs))\n}\ntestSolveMCMC=function(probs,evidence,rnds,initial){\n  samples=data.frame(A=rep(NA,3),B=rep(NA,3),C=rep(NA,3),D=rep(NA,3),E=rep(NA,3))\n  for (i in 1:2) {\n    row=evidence[i,]\n    samples[1:3,row[1,1]]=row[1,2]\n  }\n  unknown=which(is.na(samples[1,]))\n  samples[1,unknown]=initial\n  print(paste(\"Initial Sample:\",paste(samples[1,],collapse=\",\")))\n  rIndex=1\n  for (turn in 1:2) {\n    values=samples[turn,]\n    for (i in unknown) {\n      current=samples[turn,i]\n      cand=!current\n      curProb=getProbability(values,probs)\n      values[i]=cand\n      candProb=getProbability(values,probs)\n      update=F\n      if (candProb>=curProb) {\n        print(paste(\"Updating: CandProb\",candProb,\"vs CurProb\",curProb))\n        update=T\n      }\n      else {\n        if (rnds[rIndex]<=candProb/curProb) {\n          print(paste(\"Updating: CandProb\",candProb,\"vs CurProb\",curProb,\"so ratio is\",round(candProb/curProb,3),\"and rnd\",rIndex,\"=\",rnds[rIndex]))\n          update=T\n        }\n        else {\n          print(paste(\"Not Updating: CandProb\",candProb,\"vs CurProb\",curProb,\"so ratio is\",round(candProb/curProb,3),\"and rnd\",rIndex,\"=\",rnds[rIndex]))\n        }\n        rIndex=rIndex+1\n      }\n      if (!update) {\n        values[i]=current\n      }\n    }\n    samples[turn+1,unknown]=values[unknown]\n  }\n  print(samples)\n}\nmakeQuestionMCMC=function(seed=NA,answer=T,latex=F){\n  if(!is.na(seed))\n    set.seed(seed)\n  tables=makeProbTables()\n  evidence=getEvidence()\n  rnds=round(runif(6),3)\n  initial=sample(c(T,F),3,T)\n  if (latex){\n    cat(\"\\\\clearpage\\n\")\n    cat(\"\\\\section{MCMC and Directed Graphical Models}\\n\")\n    cat(\"\\nTables~\\\\ref{MCMC1} to~\\\\ref{MCMC5} provide the conditional probability distributions for a directed graphical model.\\n\")\n    cat(\"\\nA. Use this information to draw the graph of the associated directed graphical model. (1 mark)\\n\")\n    cat(\"\\nB. Table~\\\\ref{MCMC6} provides observed values for some of the nodes. Given these, \")\n    cat(\"the initial values provided in Table~\\\\ref{MCMC7} and the random numbers provided below, use the Metropolis within Gibbs MCMC sampling algorithm to generate two \")\n    cat(\"complete samples of the variables. Assume that the candidate function gives the opposite of the current value. At each step, explain \")\n    cat(\"what value you are considering, what the current and candidate values are, and why you updated it or did not update it. (4 marks)\\n\")\n\n    cat(\"\\nRandom numbers:\",paste(rnds,collapse=\",\"),\"\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{P(A)}\\n\")\n    cat(\"\\\\label{MCMC1}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c||c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" - & A=F & A=T\\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" & \",tables[[1]][1],\" & \",tables[[1]][2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{P(B$|$A)}\\n\")\n    cat(\"\\\\label{MCMC2}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c||c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" A & B=F & B=T\\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" A=F & \",tables[[2]][1,1],\" & \",tables[[2]][1,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" A=T & \",tables[[2]][2,1],\" & \",tables[[2]][2,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{P(C$|$A)}\\n\")\n    cat(\"\\\\label{MCMC3}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c||c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" A & C=F & C=T\\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" A=F & \",tables[[3]][1,1],\" & \",tables[[3]][1,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" A=T & \",tables[[3]][2,1],\" & \",tables[[3]][2,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{P(D$|$B,C)}\\n\")\n    cat(\"\\\\label{MCMC4}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c|c||c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" B & C & D=F & D=T\\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" B=F & C=F & \",tables[[4]][1,1],\" & \",tables[[4]][1,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" B=F & C=T & \",tables[[4]][2,1],\" & \",tables[[4]][2,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" B=T & C=F & \",tables[[4]][3,1],\" & \",tables[[4]][3,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" B=T & C=T & \",tables[[4]][4,1],\" & \",tables[[4]][4,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{P(E$|$C)}\\n\")\n    cat(\"\\\\label{MCMC5}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c||c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" C & E=F & E=T\\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" C=F & \",tables[[5]][1,1],\" & \",tables[[5]][1,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\" C=T & \",tables[[5]][2,1],\" & \",tables[[5]][2,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{Observed Values}\\n\")\n    cat(\"\\\\label{MCMC6}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" Node & Value \\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(evidence[1,1],\" & \",evidence[1,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(evidence[2,1],\" & \",evidence[2,2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n    unknown=(1:5)[-evidence$node]\n    cat(\"\\\\begin{table}[h!]\\n\")\n    cat(\"\\\\caption{Initial Values}\\n\")\n    cat(\"\\\\label{MCMC7}\\n\")\n    cat(\"\\\\begin{center}\\n\")\n    cat(\"\\\\begin{tabular}{ |c|c| } \\n\")\n    cat(\"\\\\hline\\n\")\n    cat(\" Node  & Value \\\\\\\\\\n\")\n    cat(\"\\\\hline\\n\")\n    cat(unknown[1],\" & \",initial[1],\"\\\\\\\\\\n\",sep=\"\")\n    cat(unknown[2],\" & \",initial[2],\"\\\\\\\\\\n\",sep=\"\")\n    cat(unknown[3],\" & \",initial[3],\"\\\\\\\\\\n\",sep=\"\")\n    cat(\"\\\\hline\\n\")\n    cat(\"\\\\end{tabular}\\n\")\n    cat(\"\\\\end{center}\\n\")\n    cat(\"\\\\end{table}\\n\")\n\n  }\n  else {\n    for (table in tables)\n      print(table)\n    print(evidence)\n    print(paste(\"Random numbers:\",paste(rnds,collapse=\",\")))\n    print(paste(\"Initial sampling values for unknown nodes (in unknown node order):\",paste(initial,collapse=\",\")))\n  }\n  if (answer) {\n    testSolveMCMC(tables,evidence,rnds,initial)\n  }\n}\n",
    "created" : 1508090211415.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2749437212",
    "id" : "18CAE14A",
    "lastKnownWriteTime" : 1513918516,
    "last_content_update" : 1513918516271,
    "path" : "C:/Users/Acer/Desktop/Dokument/AI/2017/AIExam/R/MCMC.R",
    "project_path" : "R/MCMC.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}